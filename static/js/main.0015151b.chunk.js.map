{"version":3,"sources":["components/InputValue.js","components/TodoItem.js","components/TodoList.js","containers/App.js","serviceWorker.js","index.js"],"names":["InputValue","item","handleOnChange","handleSubmit","editItem","handleCancel","Fragment","className","onSubmit","type","placeholder","value","onChange","onClick","TodoItem","deleteItem","id","handleEditItem","index","length","TodoList","inputItems","clearItem","map","key","App","state","uuid","action","e","setState","target","preventDefault","newList","newItem","updatedItems","filteredItems","filter","selectedItem","find","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0015151b.chunk.js","sourcesContent":["\timport React from 'react';\n\t\n\tconst InputValue =({item,handleOnChange,handleSubmit,editItem,handleCancel})=>{\n\t\t\n\t\t\treturn (\n\t\t\t\t<React.Fragment>\n\t\t\t\t<div className='card card-body my-3'>\n\t\t\t\t <form onSubmit={handleSubmit}>\n\t\t\t\t   <div className='input-group'>\n\t\t\t\t    <div className='input-group-prepend'>\n\t\t\t\t     <div className='input-group-text bg-primary text-white'>\n\t\t\t\t      <i className='fas fa-book'></i>\n\t\t\t\t      </div>\n\t\t\t\t     </div>\n\t\t\t\t\t\t<input type='text' \n\t\t\t\t\t\tplaceholder='enter the item name'\n\t\t\t\t\t\tclassName='form-control text-capitalize'\n\t\t\t\t\t\tvalue={item}\n                        onChange={handleOnChange}\n\t\t\t\t\t\t/>\n\t\t\t\t </div>\n\t\t\t\t <div className='input-group-prepend'>\n\t\t\t\t   <button \n\t\t\t\t   type='submit'\n\t\t\t\t    className={\n\t\t\t\t    \teditItem ?'btn btn-block btn-success text-uppercase mt-3':\n                                  'btn btn-block btn-primary text-uppercase mt-3'\n                              }>\n\t\t\t\t     {editItem ?'edit item':'add item'}\n\n\t\t\t\t\t</button>\n\t\t\t\t\t{editItem?\n\t\t\t\t\t<button className=\"btn btn-block btn-info text-uppercase mt-3\" \n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\tonClick={handleCancel}\n\t\t\t\t\t>Cancel</button>:null}\n\t\t\t\t\t</div>\n\t\t\t\t </form>\n\t\t\t\t</div>\n\t\t\t\t</React.Fragment>\n\t\t\t);\n\t\t}\n\t\nexport default InputValue;","\timport React from 'react';\n\t\n\tconst TodoItem =({item,deleteItem,id,handleEditItem,index})=>{\n\t\t\n\t\t\treturn (\n\t\t\t\t<React.Fragment>\n\t\t\t\t{\n\t\t\t\titem.length>0 &&\n\t\t\t\t<li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\n\t\t\t\t<h6>{item}</h6>\n\t\t\t\t<div className='todo-icon'>\n\t\t\t\t<span className='mx-2 text-success' \n\t\t\t\tonClick={()=> handleEditItem(id,index)}\n\t\t\t\t> \n\t\t\t\t<i className='fas fa-pen'></i></span>\n\t\t\t\t<span className='text-danger mx-2' \n\t\t\t\tonClick={()=> deleteItem(id)}> \n\t\t\t\t<i className='fas fa-trash'></i></span>\n\t\t\t\t</div>\n\t\t\t\t</li>\n\t\t\t}\n\t\t\t\t</React.Fragment>\n\t\t\t);\n\t\t}\n\t\nexport default TodoItem;","\timport React from 'react';\n\timport TodoItem from './TodoItem';\n\n\t\n\tconst TodoList =({inputItems,clearItem,deleteItem,handleEditItem})=>{\n\t\t\n\t\t\treturn (\n\t\t\t\t<React.Fragment>\n\t\t\t\t <ul className='list-group'>\n\t\t\t\t\t<h3 className='text-capitalize text-center text-info'>todo list</h3>\n\t\t\t\t\t\n\t\t\t\t\t\t{  inputItems.map((item,index)=>{\n\t\t\t\t\t\t\treturn<TodoItem \n\t\t\t\t\t\t\tkey={item.id}\n\t\t\t\t\t\t\titem={item.item}\n\t\t\t\t\t\t\tid={item.id}\n\t\t\t\t\t\t\tdeleteItem={deleteItem}\n\t\t\t\t\t\t\thandleEditItem={handleEditItem}\n\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\t\n\t\t\t\t\t\n\t\t\t\t\t<button \n\t\t\t\t\ttype='button'\n\t\t\t\t\tclassName='btn btn-block btn-danger mt-5 text-capitalize'\n\t\t\t\t\tonClick={clearItem}\n\t\t\t\t\t>clear\n\t\t\t\t\t</button>\n\t\t\t\t </ul>\n\t\t\t\t</React.Fragment>\n\t\t\t);\n\t\t}\n\t\nexport default TodoList;","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport InputValue from \"../components/InputValue\";\nimport TodoList from \"../components/TodoList\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport uuid from \"uuid\";\n\nclass App extends Component {\n  state = {\n    inputItems: [],\n    id: uuid(),\n    item: \"\",\n    editItem: false,\n    index:\"\",\n    action:0,\n  };\n\n  handleOnChange = e => {\n    this.setState({ item: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const newList = this.state.inputItems;\n    const newItem = {\n      id: this.state.id,\n      item: this.state.item\n    };\n\n    if(this.state.action!==0){\n       newList[this.state.index] =newItem;\n       this.setState({\n        inputItems: newList,\n        item: \"\",\n        id: uuid(),\n        editItem: false,\n        index:\"\",\n        action:0\n      });\n    }else{\n      const updatedItems = [...this.state.inputItems, newItem];\n      this.setState({\n        inputItems: updatedItems,\n        item: \"\",\n        id: uuid(),\n        editItem: false\n      });\n    }\n  };\n\n  clearItem = () => {\n    this.setState({ inputItems: [] });\n  };\n\n  handleCancel = ()=>{\n    this.setState({\n      item:\"\"\n    })\n  }\n\n  deleteItem = id => {\n    const filteredItems = this.state.inputItems.filter(item => item.id !== id);\n    this.setState({ inputItems: filteredItems });\n  };\n\n  handleEditItem = (id,index) => {\n    // const filteredItems = this.state.inputItems.filter(item => item.id !== id);\n\n    // const selectedItem = this.state.inputItems.find(item => item.id === id);\n    // console.log(selectedItem);\n    // this.setState({\n    //   inputItems: filteredItems,\n    //   item: selectedItem.item,\n    //   editItem: true,\n    //   id: id\n    // });\n  \n    const selectedItem = this.state.inputItems.find(item => item.id === id);\n    this.setState({\n      item: selectedItem.item,\n      editItem: true,\n      id: id,\n      index:index,\n      action:1\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <header className=\"App-header\">\n          <h1>todo App</h1>\n        </header>\n        <div className=\"container mt-5\">\n          <div className=\"row\">\n            <div className=\"col-10 mx-auto col-md-8 my-2\">\n              <h3 className=\"text-capitalize text-center\">todo input</h3>\n\n              <InputValue\n                item={this.state.item}\n                handleOnChange={this.handleOnChange}\n                handleSubmit={this.handleSubmit}\n                editItem={this.state.editItem}\n                handleCancel={this.handleCancel}\n              />\n\n              <TodoList\n                inputItems={this.state.inputItems}\n                clearItem={this.clearItem}\n                deleteItem={this.deleteItem}\n                handleEditItem={this.handleEditItem}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}